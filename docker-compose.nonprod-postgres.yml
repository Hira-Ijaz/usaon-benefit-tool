version: '3.7'

networks:
  usaon-benefit-tool-postgres:

services:
# NOTE: This compose file is purely for composition, not for use on its own.
# For example, this can be composed on top of `docker-compose.yml` and
# `docker-compose.dev.yml` to produce a more production-like development
# environment quickly.

  usaon-benefit-tool:
    environment:
      # Ensure the default database, postgres, is used
      USAON_BENEFIT_TOOL_DB_SQLITE: "false"
      USAON_BENEFIT_TOOL_DB_HOST: "db"
      USAON_BENEFIT_TOOL_DB_PORT: "5432"
      # Creds for talking to the DB:
      USAON_BENEFIT_TOOL_DB_USER: &db-user "usaon-benefit-tool"
      USAON_BENEFIT_TOOL_DB_PASSWORD: &db-pw "DoNotUseMeInProduction"
    networks: ["usaon-benefit-tool-postgres"]


  db-volume-prep:
    image: &db-image "nsidc/usaon-benefit-tool-db:latest"
    user: "root"
    # Ensure database volume directories have the correct permissions
    entrypoint: ["sh", "-c", 'mkdir -p /data/postgresql && chown -R dbuser:dbuser /data/postgresql']
    volumes: 
      - "./_db:/data:rw"


  db:
    depends_on:
      db-volume-prep:
        condition: "service_completed_successfully"
    image: *db-image
    container_name: "usaon-benefit-tool-db"
    command: ["postgres", "-c", "log_statement=none"]
    volumes:
      - "./_db/postgresql:/data/db:rw"
    environment:
      POSTGRES_USER: *db-user
      POSTGRES_PASSWORD: *db-pw
    networks: ["usaon-benefit-tool-postgres"]
    restart: "unless-stopped"
    logging:
      options:
        max-size: "20m"
        max-file: "5"

  adminer:
    image: "adminer:4.8.1"
    container_name: "adminer"
    ports:
      - "8080:8080"
    networks: ["usaon-benefit-tool-postgres"]
    restart: "unless-stopped"
    logging:
      options:
        max-size: "20m"
        max-file: "5"
